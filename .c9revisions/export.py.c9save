{"ts":1357138099439,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import arcpy,os,tempfile\n\ndata=[\n    {'in':'3','out':'2','source':'S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\BoundaryData.gdb\\\\HOUSE10','field':'House','fn':'House'},\n    {'in':'2','out':'1','source':'S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\BoundaryData.gdb\\\\SENATE10','field':'Sen','fn':'Senate'},\n    {'in':'1','out':'','source':'S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\BoundaryData.gdb\\\\cong112','field':'Cong','fn':'Congress'}\n    ]\n\ndef mergeForWeb(ls):\n    hwLine = \"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_Corridor\"\n    tLine = \"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_MBTACorridor\"\n    hwPoint=\"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_BridgeIntersection\"\n    tPoint=\"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_MBTAInfrastructure\"\n    print \"creating temp dir\"\n    temp = tempfile.mkdtemp()\n    arcpy.env.workspace=temp\n    arcpy.CreateFileGDB_management(temp,\"temp.gdb\")\n    tempgdb=temp+\"\\\\temp.gdb\\\\\"\n    print \"merging\"\n    lBase=tempgdb+\"line\"\n    pBase=tempgdb+\"pt\"\n    arcpy.Merge_management([hwLine,tLine],lBase+\"3\")\n    arcpy.Merge_management([hwPoint,tPoint],pBase+\"3\")\n    print \"adding fields\"\n    for d in data:\n        sj(lBase+d['in'],d['source'],lBase+d['out'],d['field'],d['fn'])\n        sj(pBase+d['in'],d['source'],pBase+d['out'],d['field'],d['fn'])\n    print \"cleaning fields\"\n    cleanFields(lBase)\n    cleanFields(pBase)\n    ofs=[\"ProjectNumber\",\"ContractNumber\",\"ProjectInfoLink\",\"District\",\"ProjectType\",\"Location\",\"Description\",\"TIPYear\",\"AdvDate\",\"BidOpened\",\"AwardDate\",\"NTPDate\",\"CompletionDate\",\"MaxOfCompletionDate\",\"TIPTotalCost\",\"BidAmt\",\"BidRejected\",\"OfficeEst\",\"SumOfLine_Amount\",\"MaxOfPctComp\",\"BudgetSource\",\"RecentMapChange\",\"Status\",\"Progress\",\"ProjectProgress\",\"Division\",\"Department\",\"House\",\"Senate\",\"Congress\"]\n    print \"exporting\"\n    arcpy.Dissolve_management(lBase,ls+\"\\\\line\",ofs,multi_part=\"SINGLE_PART\")\n    arcpy.Dissolve_management(pBase,ls+\"\\\\pt\",ofs,multi_part=\"SINGLE_PART\")\n    #arcpy.FeatureClassToGeodatabase_conversion([lBase,pBase],ls)\n\n\ndef sj(inf,joinf,outf,fld,fn):\n    dIn=arcpy.Describe(inf)\n    dJoin=arcpy.Describe(joinf)\n    if dJoin.shapeType!=\"Polygon\":\n        raise ShapeError(\"join needs to be a polygon\")\n    if dIn.shapeType==\"Point\" or dIn.shapeType==\"Polyline\":\n        temp = tempfile.mkdtemp()\n        print \"setting up temp dir\"\n        arcpy.CreateFileGDB_management(temp,\"temp.gdb\")\n        tempgdb=temp+\"\\\\temp.gdb\\\\\"\n        print \"errasing\"\n        arcpy.Erase_analysis(inf,joinf,tempgdb+\"unk\")\n        print \"splitting\"\n        arcpy.Split_analysis(inf,joinf,fld,tempgdb)\n        ws=arcpy.env.workspace\n        arcpy.env.workspace=tempgdb\n        shL=arcpy.ListFeatureClasses()\n        for fc in shL:\n            print \"starting on \" + fc\n            arcpy.AddField_management(fc,fn,\"TEXT\")\n            arcpy.CalculateField_management(fc,fn,\"'\"+fc+\"'\",\"PYTHON\")\n            print \"done with \" + fc\n        print \"merging\"\n        arcpy.Merge_management(shL,outf)\n    else:\n        raise ShapeError(\"input needts to be polyline or point\")\n \ndef cleanFields(inPut):\n    rows = arcpy.UpdateCursor(inPut)\n    df=[[\"District\",\"MBTA\"],[\"BudgetSource\",\"MBTA\"],[\"Progress\",1],[\"ProjectProgress\",\"On Time\"],[\"Division\",2],[\"Department\",\"MBTA\"]]\n    for row in rows:\n        for f in df:\n            if row.isNull(f[0]):\n                row.setValue(f[0],f[1])\n        rows.updateRow(row)\n    del row \n    del rows\n    \n        \n \nclass Error(Exception):\n    \"\"\"Base class for exceptions in this module.\"\"\"\n    pass\n\nclass ShapeError(Error):\n    \"\"\"Exception raised for errors in the input's shape.\n\n    Attributes:\n        expr -- input expression in which the error occurred\n        msg  -- explanation of the error\n    \"\"\"\n\n    def __init__(self, expr, msg):\n        self.expr = expr\n        self.msg = msg\n    \n\n    \nmergeForWeb(arcpy.GetParameterAsText(0))\n    \n#def newMap(in1, in2):\n#    fMappings = arcpy.FieldMappings()\n#    fMappings.addTable(in1)\n#    fMappings.addTable(in2)\n#    return fMapping\n    \n#class fields:\n#    def __init__(self,in1,in2):\n#        self.first = in1\n#        self.second=in2\n#        self.mapping=arcpy.FieldMappings()\n#        self.mapping.addTable(in1)\n#        self.mapping.addTable(in2)\n#    def merge(oName,in1,in2=false):\n#        fldMap = arcpy.FieldMap()\n#        fldMap.addInputField(in1,self.first)\n#        if in2:\n#            fldMap_streetName.addInputField(in2,self.second)\n#        nme = fldMap.outputField\n#        nme.name = oName\n#        fldMap.outputField = name\n#        self.addFieldMap(fldMap)"]],"start1":0,"start2":0,"length1":0,"length2":4893}]],"length":4893}
