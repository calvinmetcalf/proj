{"ts":1345548559442,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import arcpy,os,tempfile\n\narcpy.env.workspace=\"S:\\\\HQ\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\"\n\ndef mergeForWeb():\n    hwLine = \"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_Corridor\"\n    tLine = \"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_MBTACorridor\"\n    hwPoint=\"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_BridgeIntersection\"\n    tPoint=\"S:\\\\HQ\\\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\ProjectExports_Projects.mdb\\\\Projects_MBTAInfrastructure\"\n    arcpy.CreateFileGDB_management(\"S:\\\\HQ\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\",\"temp.gdb\")\n    arcpy.Merge_management([hwLine,tLine],\"S:\\\\HQ\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\temp.gdb\\\\line\")\n    arcpy.Merge_management([hwPoint,tPoint],\"S:\\\\HQ\\Planning\\\\DataResources\\\\TransportationProjects\\\\ProjectData\\\\temp.gdb\\\\pt\")\n\n\ndef sj(inf,joinf,outf):\n    dIn=arcpy.Describe(inf)\n    dJoin=arcpy.Describe(joinf)\n    if dJoin.shapeType!=\"Polygon\":\n        raise ShapeError(\"join needs to be a polygon\")\n    if dIn.shapeType==\"Point\":\n        arcpy.SpatialJoin_analysis(inf,joinf,outf)\n    elif dIn.shapeType==\"Polyline\":\n        temp = tempfile.mkdtemp()\n        arcpy.CreateFileGDB_management(temp,\"temp.gdb\")\n        tempgdb=temp+\"\\\\temp.gdb\"\n        \n    else:\n        raise ShapeError(\"input needts to be polyline or point\")\n        \nclass Error(Exception):\n    \"\"\"Base class for exceptions in this module.\"\"\"\n    pass\n\nclass ShapeError(Error):\n    \"\"\"Exception raised for errors in the input's shape.\n\n    Attributes:\n        expr -- input expression in which the error occurred\n        msg  -- explanation of the error\n    \"\"\"\n\n    def __init__(self, expr, msg):\n        self.expr = expr\n        self.msg = msg\n    \n\n    \n    \n    \n#def newMap(in1, in2):\n#    fMappings = arcpy.FieldMappings()\n#    fMappings.addTable(in1)\n#    fMappings.addTable(in2)\n#    return fMapping\n    \n#class fields:\n#    def __init__(self,in1,in2):\n#        self.first = in1\n#        self.second=in2\n#        self.mapping=arcpy.FieldMappings()\n#        self.mapping.addTable(in1)\n#        self.mapping.addTable(in2)\n#    def merge(oName,in1,in2=false):\n#        fldMap = arcpy.FieldMap()\n#        fldMap.addInputField(in1,self.first)\n#        if in2:\n#            fldMap_streetName.addInputField(in2,self.second)\n#        nme = fldMap.outputField\n#        nme.name = oName\n#        fldMap.outputField = name\n#        self.addFieldMap(fldMap)"]],"start1":0,"start2":0,"length1":0,"length2":2656}]],"length":2656}
