{"ts":1357580241514,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\r\n  var Communist, Socialist,\r\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n    __slice = [].slice;\r\n\r\n  Communist = (function() {\r\n\r\n    function Communist(fun) {\r\n      this.start = __bind(this.start, this);\r\n\r\n      this.send = __bind(this.send, this);\r\n\r\n      var bUrl, blob, body;\r\n      window.URL = window.URL || window.webkiURL;\r\n      if (fun) {\r\n        fun = fun.toString();\r\n        body = \"var send;var _f =  \" + fun + \";self.addEventListener('message', function(_e) {send = function(data){self.postMessage({message:data,cb:_e.data.cb})};self.postMessage({body:_f.apply(null, _e.data.body),cb:_e.data.cb})})\";\r\n      } else {\r\n        body = \"var _db = {}\\n    \t\t\t_db._add=function(name, func){\\n\t\t\t\t_db[name]=eval(\\\"(\\\"+func+\\\")\\\");\\n\t\t\t\t\treturn true;\t\\n\t\t\t\t};\t\\n\t\t\t\t_db._rm=function(name){\\n\t\t\t\t\tdelete _db[name];\t\t\\n\t\t\t\t\treturn true;\\n\t\t\t\t};\\n\t\t\t\t_db._test=function(a){\\n\t\t\t\t\treturn a || \\\"all quiet\\\";\\n\t\t\t\t};\\n\t\t\t\tvar _f =  function () {\\n\t\t\t\t    var args, method,__slice = [].slice;\\n\t\t\t\t    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\\n\t\t\t\t    return _db[method].apply(null, args);\\n\t\t\t\t  };\\n\t\t\t\t self.addEventListener('message', function(_e) {\\n\t\t\t\t \tself.send = function(data){\\n\t\t\t\t \t\tself.postMessage({\\n\t\t\t\t\t\tmessege:data,cb:_e.data.cb\\n\t\t\t\t\t});\\n\t\t\t\t};\\n\t\t\t\t\tself.postMessage({\\n\t\t\t\t\tcb:_e.data.cb,\\n\t\t\t\t\tbody:_f.apply(null, _e.data.body)\\n\t\t\t\t\t});\\n\\n\t\t\t\t});\";\r\n      }\r\n      blob = new Blob([body], {\r\n        type: \"text/javascript\"\r\n      });\r\n      bUrl = window.URL.createObjectURL(blob);\r\n      this._worker = new Worker(bUrl);\r\n      this;\r\n\r\n    }\r\n\r\n    Communist.prototype.CBs = {};\r\n\r\n    Communist.prototype.send = function() {\r\n      var cb, data, id, _i,\r\n        _this = this;\r\n      data = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      id = (\"\" + Math.random()).slice(2);\r\n      this.CBs[id] = cb;\r\n      this._worker.postMessage({\r\n        body: data,\r\n        cb: id\r\n      });\r\n      this._worker.onmessage = function(e) {\r\n        if (e.data.body) {\r\n          _this.CBs[e.data.cb](null, e.data.body);\r\n          delete _this.CBs[e.data.cb];\r\n        } else if (e.data.message) {\r\n          _this.CBs[e.data.cb](null, e.data.message);\r\n        }\r\n        return true;\r\n      };\r\n      this._worker.onerror = function(e) {\r\n        cb(e);\r\n        return true;\r\n      };\r\n      return true;\r\n    };\r\n\r\n    Communist.prototype.start = function(cb) {\r\n      return this.send(cb);\r\n    };\r\n\r\n    Communist.prototype.close = function() {\r\n      this._worker.terminate();\r\n      return true;\r\n    };\r\n\r\n    Communist.prototype.add = function(method, func, cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return this.send(\"_add\", method, func.toString(), cb);\r\n    };\r\n\r\n    Communist.prototype.remove = function(method, cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return this.send(\"_rm\", method, cb);\r\n    };\r\n\r\n    true;\r\n\r\n    return Communist;\r\n\r\n  })();\r\n\r\n  window.Communist = Communist;\r\n\r\n  Socialist = (function() {\r\n\r\n    function Socialist(fun) {\r\n      this.start = __bind(this.start, this);\r\n\r\n      this.send = __bind(this.send, this);\r\n\r\n      var _this = this;\r\n      if (fun) {\r\n        this._func = fun;\r\n      } else {\r\n        this._db = {};\r\n        this._db._add = function(name, func) {\r\n          _this._db[name] = func;\r\n          return true;\r\n        };\r\n        this._db._rm = function(name) {\r\n          delete _this._db[name];\r\n          return true;\r\n        };\r\n        this._func = function() {\r\n          var args, name;\r\n          name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\r\n          return this._db[name].apply(null, args);\r\n        };\r\n      }\r\n    }\r\n\r\n    Socialist.prototype.CBs = {};\r\n\r\n    Socialist.prototype.send = function() {\r\n      var cb, data, self, _i;\r\n      data = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];\r\n      self = {};\r\n      self.send = function(m) {\r\n        return cb(null, m);\r\n      };\r\n      if (this._db) {\r\n        self._db = this._db;\r\n      }\r\n      self.setInterval = function() {\r\n        var nDelay, vCallback, _args, _func,\r\n          _this = this;\r\n        vCallback = arguments[0], nDelay = arguments[1], _args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\r\n        _func = function() {\r\n          return vCallback.apply(_this, _args);\r\n        };\r\n        return window.setInterval(_func, nDelay);\r\n      };\r\n      self.setTimeout = function() {\r\n        var nDelay, vCallback, _args, _func,\r\n          _this = this;\r\n        vCallback = arguments[0], nDelay = arguments[1], _args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\r\n        _func = function() {\r\n          return vCallback.apply(_this, _args);\r\n        };\r\n        return window.setInterval(_func, nDelay);\r\n      };\r\n      try {\r\n        cb(null, this._func.apply(self, data));\r\n        return true;\r\n      } catch (err) {\r\n        cb(err);\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    Socialist.prototype.start = function(cb) {\r\n      return this.send(cb);\r\n    };\r\n\r\n    Socialist.prototype.close = function() {\r\n      var _func;\r\n      _func = void 0;\r\n      return true;\r\n    };\r\n\r\n    Socialist.prototype.add = function(method, func, cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return this.send(\"_add\", method, func, cb);\r\n    };\r\n\r\n    Socialist.prototype.remove = function(method, cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return this.send(\"_rm\", method, cb);\r\n    };\r\n\r\n    true;\r\n\r\n    return Socialist;\r\n\r\n  })();\r\n\r\n  window.Socialist = Socialist;\r\n\r\n  window.communist = function(fun) {\r\n    if (window.Worker) {\r\n      if (fun) {\r\n        return new Communist(fun);\r\n      } else {\r\n        return new Communist();\r\n      }\r\n    } else {\r\n      if (fun) {\r\n        return new Socialist(fun);\r\n      } else {\r\n        return new Socialist();\r\n      }\r\n    }\r\n  };\r\n\r\n}).call(this);"]],"start1":0,"start2":0,"length1":0,"length2":6475}]],"length":6475}
{"contributors":[],"silentsave":true,"ts":1357580329230,"patch":[[{"diffs":[[0,"dy);\r\n          "],[1,"//"],[0,"delete _this.CBs"]],"start1":2321,"start2":2321,"length1":32,"length2":34}]],"length":6477,"saved":false}
{"ts":1357581913224,"patch":[[{"diffs":[[0,"    "],[-1,"//"],[0,"dele"]],"start1":2333,"start2":2333,"length1":10,"length2":8}]],"length":6475,"saved":false}
